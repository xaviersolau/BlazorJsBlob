@page "/"

@* Inject the IBlobService *@
@inject IBlobService BlobService
@inject HttpClient HttpClient

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<p>
<a href="tropical-waterfall.jpg" download><button>Link to the file</button></a>
</p>

<p>
<button @onclick="ClickSaveFromUrlAsync">Download Url</button>
</p>

<p>
<button @onclick="ClickSaveFromDataUrlAsync">Save data Url</button>
</p>

<p>
<button @onclick="ClickSaveFromBlobUrlAsync">Create and Save Url Blob</button>
</p>

<button @onclick="ClickCreateAsync">Create Blob</button>

@if (blob != null)
{
    <button @onclick="ClickSaveAsync">Save Blob</button>

    <button @onclick="ClickDeleteAsync">Delete Blob</button>
    
    <div style="margin-top:10px">
        <embed src="@blob.Uri" width="500" height="500" type="@blob.Type">
    </div>
}
else if (loading)
{
    <div style="margin-top:10px">
        <strong>Loading....</strong>
    </div>
}
else
{
    <div style="margin-top:10px">
        <strong>No blob to display!</strong>
    </div>    
}


@code{
    private IBlob blob = null;
    private bool loading = false;

    public async Task ClickCreateAsync()
    {
        loading = true;

        if (blob != null)
        {
            await blob.DisposeAsync();
            blob = null;

            StateHasChanged();

            await Task.Yield();
        }

        var stream = await HttpClient.GetStreamAsync(@"tropical-waterfall.jpg").ConfigureAwait(false);

        blob = await BlobService.CreateBlobAsync(stream, "image/jpeg");
        loading = false;
    }

    public async Task ClickSaveAsync()
    {
        if (blob != null)
        {
            await BlobService.SaveAsFileAsync(blob, "tropical-waterfall.jpg");
        }
    }

    public async Task ClickSaveFromUrlAsync()
    {
        await BlobService.SaveAsFileAsync("tropical-waterfall.jpg");
    }

    public async Task ClickSaveFromBlobUrlAsync()
    {
        var stream = await HttpClient.GetStreamAsync(@"tropical-waterfall.jpg").ConfigureAwait(false);

        await using var blob = await BlobService.CreateBlobAsync(stream, "image/jpeg");

        await BlobService.SaveAsFileAsync(blob, "tropical-waterfall.jpg");
    }

    public async Task ClickSaveFromDataUrlAsync()
    {
        var stream = await HttpClient.GetStreamAsync(@"tropical-waterfall.jpg").ConfigureAwait(false);

        var memBuffer = new MemoryStream();

        await stream.CopyToAsync(memBuffer);

        var b64 = Convert.ToBase64String(memBuffer.ToArray());

        await BlobService.SaveAsFileAsync($"data:image/jpeg;base64," + b64, "tropical-waterfall.jpg");
    }

    public async Task ClickDeleteAsync()
    {
        if (blob != null)
        {
            await blob.DisposeAsync();
            blob = null;            
        }
    }
}
